worker_processes auto;

error_log logs/error.log info;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    log_format custom_format 'ERAN## $remote_addr - $remote_user [$time_local] '
                             '"$request" $status $body_bytes_sent '
                             '"$http_referer" "$http_user_agent"';
    sendfile        on;
    keepalive_timeout  65;

    server {
        listen       80;
        resolver local=on ipv6=off;

        # Inference route requiring authentication
        location /login {
            access_by_lua_file /usr/local/openresty/auth.lua;
            proxy_pass ${API_KEY_SERVICE};
        }

        # Callback route for handling OIDC authentication response
        location /callback {
            access_by_lua_file /usr/local/openresty/callback.lua;
            # internal;  # Prevent direct access to this location
        }

        # App route without authentication
        location /app {
            rewrite ^/app(/.*)?$ /login$1 break;
            proxy_pass ${API_KEY_SERVICE};
        }

       # Health check route
        location /health {
            access_log off;  # Disable logging for health checks
            return 200 'OK';
            add_header Content-Type text/plain;
        }

        location / {
            access_log /dev/stdout custom_format;
            access_by_lua_block {
                 local opts = {
                     discovery = "https://${KC_URL}/realms/rhelai/.well-known/openid-configuration",
                     client_id = "nginx",
                     client_secret = "${KC_REALM_CLIENT_SECRET}",
                     ssl_verify = "no"
                 }

                 local res, err = require("resty.openidc").bearer_jwt_verify(opts)
                 if err then
                     ngx.log(ngx.ERR, "Bearer token validation error: ", err)
                     ngx.exit(ngx.HTTP_UNAUTHORIZED)
                 end

                 if not res then
                     ngx.status = ngx.HTTP_UNAUTHORIZED
                     ngx.log(ngx.ERR, "Unauthorized, invalid or missing token")
                     ngx.exit(ngx.HTTP_UNAUTHORIZED)
                 end
                 ngx.log(ngx.INFO, "Authentication success")
            }
            proxy_pass ${BACKEND_SERVICE};
        }
    }

    include /etc/nginx/conf.d/*.conf;
}

